事件处理分为5个部分：
1.监听事件   可以用 v-on 指令监听 DOM 事件来触发一些 JavaScript 代码。
    <div id="example-1">
      <button v-on:click="counter += 1">增加 1</button>
      <p>这个按钮被点击了 {{ counter }} 次。</p>
    </div>
    var example1 = new Vue({
      el: '#example-1',
      data: {
        counter: 0
      }
    })
    
2.方法事件处理器

    <div id="example-2">
      <!-- `greet` 是在下面定义的方法名 -->
      <button v-on:click="greet">Greet</button>
    </div>
    var example2 = new Vue({
      el: '#example-2',
      data: {
        name: 'Vue.js'
      },
      // 在 `methods` 对象中定义方法
      methods: {
        greet: function (event) {
          // `this` 在方法里指当前 Vue 实例
          alert('Hello ' + this.name + '!')
          // `event` 是原生 DOM 事件
          alert(event.target.tagName)
        }
      }
    })
    // 也可以用 JavaScript 直接调用方法
    example2.greet() // -> 'Hello Vue.js!'
    
    
3.内联处理器方法

    除了直接绑定到一个方法，也可以用内联 JavaScript 语句：
    <div id="example-3">
      <button v-on:click="say('hi')">Say hi</button>
      <button v-on:click="say('what')">Say what</button>
    </div>
    new Vue({
      el: '#example-3',
      methods: {
        say: function (message) {
          alert(message)
        }
      }
    })
    
4.事件修饰符
在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在 methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。
为了解决这个问题， Vue.js 为 v-on 提供了 事件修饰符。通过由点(.)表示的指令后缀来调用修饰符。
    .stop
    .prevent
    .capture
    .self
    .once
    <!-- 阻止单击事件冒泡 -->
    <a v-on:click.stop="doThis"></a>
    <!-- 提交事件不再重载页面 -->
    <form v-on:submit.prevent="onSubmit"></form>
    <!-- 修饰符可以串联  -->
    <a v-on:click.stop.prevent="doThat"></a>
    <!-- 只有修饰符 -->
    <form v-on:submit.prevent></form>
    <!-- 添加事件侦听器时使用事件捕获模式 -->
    <div v-on:click.capture="doThis">...</div>
    <!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
    <div v-on:click.self="doThat">...</div>
    
5.按键修饰符
在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：
  <input v-on:keyup.13="submit">
记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：


  <!-- 同上 -->
  <input v-on:keyup.enter="submit">
  <!-- 缩写语法 -->
  <input @keyup.enter="submit">
全部的按键别名：
  .enter
  .tab
  .delete (捕获 “删除” 和 “退格” 键)
  .esc
  .space
  .up
  .down
  .left
  .right
可以通过全局 config.keyCodes 对象自定义按键修饰符别名：
// 可以使用 v-on:keyup.f1
  Vue.config.keyCodes.f1 = 112
  
  表单控件绑定
  
  v-model指令在表单控件元素上创建双向数据绑定，它会根据控件类型自动选取争取的方法来袭更新元素，它负责监听用户的输入事件以更新数据，并处理一些极端的例子。
  <div id="app-6">
    <p>{{message}}</p>
    <input v-model="message">
</div>


        复选框
        <div id="app4-22">
            <input type="checkbox" id="jack" value="jack" v-model="checkNames">
            <label for="jack">Jack</label>
            <input type="checkbox" id="john" value="john" v-model="checkNames">
            <label for="john">John</label>
            <input type="checkbox" id="mike" value="mike" v-model="checkNames">
            <label for="mike">mike</label>
            <span>您已选择：{{checkNames}}</span>
        </div>
        
          var app422 = new Vue({
                el:"#app4-22",
                data:{
                    checkNames:[]
                }
            });
            
            选择列表
            <div id="selected">
                <select v-model="select">
                    <option value="炝炒圆白菜">炝炒圆白菜</option>
                    <option value="蚂蚁上树">蚂蚁上树</option>
                    <option value="红烧狮子头">红烧狮子头</option>
                    <option value="蛋花汤">蛋花汤</option>
                    <option value="米饭">米饭</option>

                </select>
                <span>您已点的菜：{{select}}</span>
            </div>
            
             var app424 = new Vue({
                    el:"#selected",
                    data:{
                        select:null  //多项列表时select:[]
                    }
                });
                
                
                动态选项，用v-for 渲染
                <select v-model="selected">
                  <option v-for="option in options" v-bind:value="option.value">
                    {{ option.text }}
                  </option>
                </select>
                <span>Selected: {{ selected }}</span>
                
                new Vue({
                  el: '...',
                  data: {
                    selected: 'A',
                    options: [
                      { text: 'One', value: 'A' },
                      { text: 'Two', value: 'B' },
                      { text: 'Three', value: 'C' }
                    ]
                  }
                })
                
                修饰符：
                1.  .lazy
                    在v-model下点击一个修饰符lazy，就可以转变为在change事件中同步
                    <div id="lazy">
                        <input type="text" v-model.lazy="msg">
                        <p>输入的是：{{msg}}</p>
                    </div>
                    
                    
                   2.   .number
                     如果想自动将用户的输入值转为number类型，可以添加一个修饰符number给v-model<input v-model.number="age" type="number">
                   
                   
                   3.    .trim
                        
                      添加trim修饰符可以自动过滤用户输入的首尾空格。
                      
                      20170402
  
  
  
  
  
  
  
  
  
  
  
