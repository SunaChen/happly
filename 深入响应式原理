Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。
Vue 不允许在已经创建的实例上动态添加新的根级响应式属性(root-level reactive property)。然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上：
Vue.set(vm.someObject, 'b', 2)，还可以使用vm.$set实例方法，这也是全局vue.set方法的别名
this.$set(this.someObject.'b',2)。


向已有对象添加一些属性，如果世宏Object.assign()或者_.extend()方法来添加属性。但添加到队形上的新属性不会触发更新。可以创建一个新的对象，让它包含对象的属性和
新的属性。
// 代替 `Object.assign(this.someObject, { a: 1, b: 2 })`
this.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })


声明响应式属性
由于vue不允许动态添加根级响应式属性，所以必须在初始化实例前声明根级响应式属性
var vm = new Vue({
  data: {
    // 声明 message 为一个空值字符串
    message: ''
  },
  template: '<div>{{ message }}</div>'
})
// 之后设置 `message` 
vm.message = 'Hello!'


异步更新队列
Vue 异步执行 DOM 更新。为了在数据变化知乎等待vue完成更新DOM，可以在数据变化之后立即使用v
Vue.nextTick(callback)。这样回调函数在DOM更新完成后就会调用。
<div="example">{{message}}</div>

var vm = new Vue({
  el:"#example",
  data:{
    message:'123'
  }
})
vm.message = 'new message'// 更改数据
vm.$el.textContent === 'new message'  // false
vm.nextTick(function(){
  vm.$el.textContent === 'new message' // true
})
vm.$nextTick()不需要全局Vue，并且回调函数中的this将自动绑定到当前的Vue实例上：
Vue.component('example',{
    template:'<span></span>',
    data:function(){
        return{
          message:'not updated'
        }
      },
      
    methods:{
      updateMessage:function(){
        this.message = 'updated'
        console.log(this.$el.textContent)  // => '没有更新'
        this.nextTick(function(){
            console.log(this.$el.textContent) // => '更新完成'
          })
      }
    }
})







