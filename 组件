组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 js 特性扩展。

1.注册组建
  Vue.component('my-component', {
  // 选项
})
  <div id="example">
    <my-component></my-component>
   </div>
   
   Vue.component('my-component', {
      template: '<div>A custom component!</div>'
    })
    // 创建根实例
    new Vue({
      el: '#example'
    })
    
2.局部注册
  不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：
    var Child = {
      template: '<div>A custom component!</div>'
    }
    new Vue({
      // ...
      components: {
        // <my-component> 将只在父模板可用
        'my-component': Child
      }
    })
    
3.DOM模板解析说明
    当使用 DOM 作为模版时（例如，将 el 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 <ul> ， <ol>， <table> ， <select> 限制了能被它包裹的元素， <option> 只能出现在其它元素内部。
    在自定义组件中使用这些受限制的元素时会导致一些问题，例如：
    <table>
      <my-row>...</my-row>
    </table>
    自定义组件 <my-row> 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 is 属性：
    <table>
      <tr is="my-row"></tr>
    </table>
    
    

4.data必须是函数
    通过Vue构造器传入的各种选项大多数都可以在组件里用。 data 是一个例外，它必须是函数。 实际上，如果你这么做：
    <div id="example-2">
      <simple-counter></simple-counter>
      <simple-counter></simple-counter>
      <simple-counter></simple-counter>
    </div>
    var data = { counter: 0 }
      Vue.component('simple-counter', {
        template: '<button v-on:click="counter += 1">{{ counter }}</button>',
        // 技术上 data 的确是一个函数了，因此 Vue 不会警告，
        // 但是我们返回给每个组件的实例的却引用了同一个data对象
        data: function () {
          return {
            counter: 0
          }
        }
      })
      new Vue({
        el: '#example-2'
      })


5.构成组件
    组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。
在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。

      5.1使用Prop传递数据
      组件实例的作用域是孤立的。这意味着不能(也不应该)在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，需要通过子组件的props选项。
        子组件要显式地用 props 选项声明它期待获得的数据：
        Vue.component('child', {
          // 声明 props
          props: ['message'],
          // 就像 data 一样，prop 可以用在模板内
          // 同样也可以在 vm 实例中像 “this.message” 这样使用
          template: '<span>{{ message }}</span>'
        })
        然后我们可以这样向它传入一个普通字符串：
        <child message="hello!"></child>
        
        
        5.2动态Prop
        在模板中，要动态地绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相类似，就是用 v-bind。每当父组件的数据变化时，该变化也会传导给子组件：
          <div>
            <input v-model="parentMsg">
            <br>
            <child v-bind:my-message="parentMsg"></child>
          </div>
          使用 v-bind 的缩写语法通常更简单：
          <child :my-message="parentMsg"></child>
          
          5.3单项数据流
            prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。
            另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出警告。
            为什么我们会有修改prop中数据的冲动呢？通常是这两种原因：
            1.prop 作为初始值传入后，子组件想把它当作局部数据来用；
            2.prop 作为初始值传入，由子组件处理成其它数据输出。
          5.4Prop验证
            可以为组件的 props 指定验证规格。如果传入的数据不符合规格，Vue 会发出警告。当组件给其他人使用时，这很有用。
            要指定验证规格，需要用对象的形式，而不能用字符串数组
            
            
            
6.自定义事件
    父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件
        6.1使用v-on绑定自定义事件
              使用$on(tagName)监听事件
              使用$emit(tagName)触发事件
              
            另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。
              
            <div id="counter-event-example">
              <p>{{ total }}</p>
              <button-counter v-on:increment="incrementTotal"></button-counter>
              <button-counter v-on:increment="incrementTotal"></button-counter>
            </div>
            
            Vue.component('button-counter', {
                template: '<button v-on:click="increment">{{ counter }}</button>',
                data: function () {
                  return {
                    counter: 0
                  }
                },
                methods: {
                  increment: function () {
                    this.counter += 1
                    this.$emit('increment')
                  }
                },
              })
              new Vue({
                el: '#counter-event-example',
                data: {
                  total: 0
                },
                methods: {
                  incrementTotal: function () {
                    this.total += 1
                  }
                }
              })
    
      
         6.2 给组件绑定原生事件
         
         有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：
         <my-component v-on:click.native="doTheThing"></my-component>
         
         6.3使用自定义事件的表单输入组件
         
         
         6.4非父子组件通信
            有时候两个组件也需要通信(非父子关系)。在简单的场景下，可以使用一个空的 Vue 实例作为中央事件总线：
            var bus = new Vue()
            // 触发组件 A 中的事件
            bus.$emit('id-selected', 1)
            // 在组件 B 创建的钩子中监听事件
            bus.$on('id-selected', function (id) {
              // ...
            })
            
            
7.内容分发

    为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发 
    7.1使用Slot分发内容
            
            
    7.2单个slot
    
    7.3具名slot
    
    7.4作用域插槽
    
8.  动态组件

9.  keep-alive

10. 编写可复用组件

11. 子组件索引

12. 异步组件

13. 递归组件

14. 组件间的循环引用

15. 内联模板

           
       
         
      
      
      
      
      
      
      
      
      

    
    
    
    
    
    
